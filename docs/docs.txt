Javascript frameworks like Angular & React are used to make a single page applications.

Single Page application as we discussed before, will have only one html files which will be served by your server with a bunch of javascript dynamically injected by webpack or any bundler to it.

One thing worth noticing here is, while using a single page application, the refresh icon in url bar never spins again after the page loaded for 1st time. As in SPAs we're not requesting for any other page or HTML file to server.

But what if you want to make the user feel like he's using a multi-page traditional application. Let say when user clicks on "About" section in nav bar, you want your URL to changed to localhost:4200/About

Angular ships with a routing package to achieve this kind of behaviour. By this we can portray to user a experience the behavious he used to get always from Multi-page application from very old time.

And with that we can show or hide different views on screen using the huge JS bundle we injected in our HTML page.

By this to user it will look like a new page is loaded as the url changed, but behind the scenes it's js changing the DOM.

------------------------------------------------------------------------------------

Previously,:
<li role="presentation" class="active"><a routerLink="/">Home</a></li>
<li role="presentation"><a routerLink="/servers">Servers</a></li>
<li role="presentation"><a [routerLink]="['/users']">Users</a></li>
<li role="presentation"><a [routerLink]="['/users', '/something']">Users2</a></li>

Here the class="active" is attached to 1st li and it's not getting changed even after clicking on other tabs. 
It's a css thing we need to fix here.

The active class used here is from bootstrap. We could implement our own styling of bootstrap's active class as well.

So to apply the active class dynamically Angular gives us a special directive called routerLinkActive

The value of the routerLinkActive is the css class name you want to apply to the tab which is active.

When the activated tab changes, it removes the css class from previously active element and applies to current active element

routerLinkActive can be hooked into the link element or to the parent of the link component also.

But as bootstrap's active class need to be applied on parent of the link eleemnt, 
we need to hook the routerLinkActive to the parent element.

As our 1st link is "" (empty string -- for home component), routerLinkActive doesn't match the exact path
We need to add another config ie;
[routerLinkActiveOptions] = "{exact: true}"

Which ensures the active class will applied to 1st link (""), only when it's a exact match 
and not any url starting with "/".
